
        Taylor Translator (taylor)
        ==========================

What it does?
============
    Given a system of ODEs, generate a C-procedure which
    computes the jet derivatives at a given point, and
    a procedure that integrates the given ODE one step.

    The output procedure are of the following type

  MY_FLOAT **taylor_coefficients_NAME( MY_FLOAT t, MY_FLOAT *x0, int order)

  int taylor_step__ODE_NAME__(MY_FLOAT *ti,
                 MY_FLOAT *x,
                 int      dir,
                 int      step_ctl,
                 double   log10abserr,
                 double   log10relerr,
                 MY_FLOAT *endtime,
                 MY_FLOAT *ht,
                 int      *order)

    The function 'taylor_coefficients_NAME' returns a static
    array of MY_FLOAT *, the size of the return value is 
    guaranteed to be bigger than the dimension of the system
    of ODEs. Each entry points to an array of MY_FLOAT
    of size order+1.

    The function 'taylor_step_NAME_' integrate the given
    ODE one step forward, using the supplied step-size,
    error_tolerance and some other control parameters.

    If you want to use a multiple precision library, you need to
    define a few macros in "taylor.h" to compile the output code.
    Run 'taylor' with the -header option to generate a sample header file.

    Taylor has been tested and is known to work well
    with Keith Briggs' doubledouble package 
      http://www.btexact.com/people/briggsk2/doubledouble.html
    David Bailey's quad-double package
      http://www.nersc.gov/~dhbailey/mpdist/mpdist.html
    as well the GMP (the Gnu Multiple Precision Library) 
    package.

    Taylor also generates the main() function if the -main command line
    switch is given. The generated code is ready to compile and run.


Compiling
=========   
      run make to compile "taylor". 


Command line options
====================
  [-name ODE_NAME]    # Specify ODE name
  [-o outfile]        # Specify output file name

  [-doubledouble | -gmp PRECISION_IN_BITS | -qd_real |  -dd_real] 
  [-main | -header | -jet | -main_only] 
  [-step STEP_CONTROL_METHOD ]
  [-u | -userdefined ] STEP_SIZE_FUNCTION_NAME ORDER_FUNCTION_NAME 
  [-f77 ] NAME 
  [-sqrt ]
  [-headername HEADER_FILE_NAME]
  [-debug] [-help] [-v]  file

 See the man page for a detailed description about these flags.

Input Syntax:
=============
    Taylor is expression based, with a branching expression extension
         if(condition) { expr } else {expr};
    and a non-nested summation
         sum(expr, id=int,int);
    Expressions defined by the following gramma (see parse.y for details).

    A few special variables are used to control the behavoir
    of the integrator when main() is generated. They are:
	absoluteErrorTolerance       /* error tolerance for step control */
	relativeErrorTolerance       /* error tolerance for step control */
	stopTime                     /* stop time */
	startTime                    /* start time */


    Grammar:
    ========

    initialValues:
                      expr
                   | initialValues ',' expr

    booleanExpr:
		       expr EQ  expr
		     | expr NEQ expr
		     | expr GE  expr
		     | expr GT  expr
		     | expr LE  expr
		     | expr LT  expr
		     | bexpr AND  bexpr
		     | bexpr OR   bexpr
                     | '(' booleanExpr ')'
    expr:
                      term
		    | expr '^' expr
		    | expr '*' expr
		    | expr '/' expr
		    | expr '+' expr
		    | expr '-' expr
                    | '-' expr   %prec UNARY
                    | '+' expr   %prec UNARY
                    | IF '(' bexpr ')' '{' expr '}' ELSE '{' expr '}'
                    ;

    term:
		      id
                    | idexpr arrayref
	            | INTEGER_CONSTANT
	            | FLOAT_CONSTANT
	            | mathFunction '(' expr ')'
                    | SUM '(' expr ','  idexpr  '=' expr ',' expr ')'
                      ;

    arrayref:        one_idx
                   | arrayref one_idx
                    ;
    one_idx: 
                   '[' expr ']'
                    ;
    mathFunction:
                    sin | cos | exp | log | tan | atan | sinh | cosh | tanh
                    ;                

=========================================================================================


        


  
    
    

         


	

